{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "card-06",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "Media upload.",
  "registryDependencies": [
    "upload",
    "images",
    "videos"
  ],
  "files": [
    {
      "path": "blocks/card-06/page.tsx",
      "content": "import HoverLinkPreview from \"./components/hover-link-preview\";\n\nexport default function Page() {\n  return (\n    <>\n      <div className=\"max-w-screen bg-backgroud z-50 flex min-h-screen items-center justify-center p-4\">\n        <div className=\"flex flex-col gap-12 items-center text-center\">\n          <div className=\"p-10 flex gap-1 font-medium text-xl\">\n            Hey, have you tried\n            <HoverLinkPreview href=\"https://21st/dev/magic\" previewImage=\"https://21st.dev/magic-agent-og-image.png\" imageAlt=\"Example preview\">\n              Magic MCP?\n            </HoverLinkPreview>\n            It's amazing!\n          </div>\n\n          <p>(Try hovering link)</p>\n        </div>\n      </div>\n    </>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/page.tsx"
    },
    {
      "path": "blocks/card-06/components/hover-link-preview.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useRef, useState } from \"react\";\nimport { motion, AnimatePresence, useMotionValue, useSpring } from \"framer-motion\";\n\ninterface HoverLinkPreviewProps {\n  href: string;\n  previewImage: string;\n  imageAlt?: string;\n  children: React.ReactNode;\n}\n\nfunction HoverLinkPreview({ href, previewImage, imageAlt = \"Link preview\", children }: HoverLinkPreviewProps) {\n  const [showPreview, setShowPreview] = useState(false);\n  const prevX = useRef<number | null>(null);\n\n  // Motion values for smooth animation\n  const motionTop = useMotionValue(0);\n  const motionLeft = useMotionValue(0);\n  const motionRotate = useMotionValue(0);\n\n  // Springs for natural movement\n  const springTop = useSpring(motionTop, { stiffness: 300, damping: 30 });\n  const springLeft = useSpring(motionLeft, { stiffness: 300, damping: 30 });\n  const springRotate = useSpring(motionRotate, { stiffness: 300, damping: 20 });\n\n  // Handlers\n  const handleMouseEnter = () => {\n    setShowPreview(true);\n    prevX.current = null;\n  };\n\n  const handleMouseLeave = () => {\n    setShowPreview(false);\n    prevX.current = null;\n    motionRotate.set(0);\n  };\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLAnchorElement>) => {\n    const PREVIEW_WIDTH = 192;\n    const PREVIEW_HEIGHT = 112;\n    const OFFSET_Y = 40;\n\n    // Position the preview\n    motionTop.set(e.clientY - PREVIEW_HEIGHT - OFFSET_Y);\n    motionLeft.set(e.clientX - PREVIEW_WIDTH / 2);\n\n    // Calculate tilt based on horizontal movement\n    if (prevX.current !== null) {\n      const deltaX = e.clientX - prevX.current;\n      const newRotate = Math.max(-15, Math.min(15, deltaX * 1.2));\n      motionRotate.set(newRotate);\n    }\n    prevX.current = e.clientX;\n  };\n\n  return (\n    <>\n      <a href={href} target=\"_blank\" rel=\"noopener noreferrer\" className=\"relative inline-block cursor-pointer text-blue-600 underline\" onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave} onMouseMove={handleMouseMove}>\n        {children}\n      </a>\n\n      <AnimatePresence>\n        {showPreview && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.8, y: -10, rotate: 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.8, y: -10, rotate: 0 }}\n            style={{\n              position: \"fixed\",\n              top: springTop,\n              left: springLeft,\n              rotate: springRotate,\n              zIndex: 50,\n              pointerEvents: \"none\",\n            }}\n          >\n            <div className=\"bg-white border rounded-2xl shadow-lg p-2 min-w-[180px] max-w-xs\">\n              <img src={previewImage} alt={imageAlt} draggable={false} className=\"w-48 h-28 object-cover rounded-md\" />\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </>\n  );\n};\n\nexport default HoverLinkPreview;",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": "lib/utils.ts"
    }
  ],
  "categories": [
    "card"
  ]
}