{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tool-02",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "Before after components.",
  "registryDependencies": [
    "compare"
  ],
  "files": [
    {
      "path": "blocks/tool-02/page.tsx",
      "content": "import React from \"react\";\nimport { Compare } from \"./components/compare\";\nimport {\n  ImageComparison,\n  ImageComparisonImage,\n  ImageComparisonSlider,\n  ImageComparisonMarquee,\n} from \"./components/image-compare\";\n\nconst Index = () => {\n  return (\n    <>\n      <div className=\"n bg-backgroud z-50 flex min-h-screen items-center justify-center p-4\">\n        {/* <ImageComparison className=\"aspect-[16/10] w-full rounded-lg border border-zinc-200 dark:border-zinc-800\">\n          <ImageComparisonImage src=\"https://motion-primitives.com/mp_dark.png\" alt=\"Motion Primitives Dark\" position=\"left\" />\n          <ImageComparisonImage src=\"https://motion-primitives.com/mp_light.png\" alt=\"Motion Primitives Light\" position=\"right\" />\n          <ImageComparisonSlider className=\"w-2 bg-white/50 backdrop-blur-sm transition-colors hover:bg-white/80\">\n            <div className=\"absolute left-1/2 top-1/2 h-8 w-6 -translate-x-1/2 -translate-y-1/2 rounded-[4px] bg-white\" />\n          </ImageComparisonSlider>\n        </ImageComparison> */}\n        <ImageComparisonMarquee\n          comparisons={[\n            {\n              leftSrc: \"https://motion-primitives.com/mp_dark.png\",\n              rightSrc: \"https://motion-primitives.com/mp_light.png\",\n              alt: \"Perbandingan 1\",\n            },\n            {\n              leftSrc: \"https://motion-primitives.com/mp_dark.png\",\n              rightSrc: \"https://motion-primitives.com/mp_light.png\",\n              alt: \"Perbandingan 2\",\n            },\n            {\n              leftSrc: \"https://motion-primitives.com/mp_dark.png\",\n              rightSrc: \"https://motion-primitives.com/mp_light.png\",\n              alt: \"Perbandingan 3\",\n            },\n            {\n              leftSrc: \"https://motion-primitives.com/mp_dark.png\",\n              rightSrc: \"https://motion-primitives.com/mp_light.png\",\n              alt: \"Perbandingan 4\",\n            },\n            {\n              leftSrc: \"https://motion-primitives.com/mp_dark.png\",\n              rightSrc: \"https://motion-primitives.com/mp_light.png\",\n              alt: \"Perbandingan 5\",\n            },\n            {\n              leftSrc: \"https://motion-primitives.com/mp_dark.png\",\n              rightSrc: \"https://motion-primitives.com/mp_light.png\",\n              alt: \"Perbandingan 6\",\n            },\n          ]}\n          transitionDuration={3000} // Waktu transisi dalam milidetik\n          pauseOnHover={true}\n          reverse={false}\n        />\n        {/* <div className=\"rounded-3xl border border-neutral-200 bg-neutral-100 p-4  dark:border-neutral-800 dark:bg-neutral-900\">\n          <Compare\n            firstImage=\"https://assets.aceternity.com/code-problem.png\"\n            secondImage=\"https://assets.aceternity.com/code-solution.png\"\n            firstImageClassName=\"object-cover object-left-top\"\n            secondImageClassname=\"object-cover object-left-top\"\n            className=\"h-[250px] w-[200px] md:h-[500px] md:w-[500px]\"\n            slideMode=\"hover\"\n            autoplay={true}\n          />\n        </div> */}\n      </div>\n    </>\n  );\n};\n\nexport default Index;\n",
      "type": "registry:page",
      "target": "app/main.tsx"
    },
    {
      "path": "blocks/tool-02/components/compare.tsx",
      "content": "\"use client\";\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\nimport { EllipsisVertical } from \"lucide-react\";\n\ninterface CompareProps {\n  firstImage?: string;\n  secondImage?: string;\n  className?: string;\n  firstImageClassName?: string;\n  secondImageClassname?: string;\n  initialSliderPercentage?: number;\n  slideMode?: \"hover\" | \"drag\";\n  showHandlebar?: boolean;\n  autoplay?: boolean;\n  autoplayDuration?: number;\n}\nexport const Compare = ({\n  firstImage = \"\",\n  secondImage = \"\",\n  className,\n  firstImageClassName,\n  secondImageClassname,\n  initialSliderPercentage = 50,\n  slideMode = \"hover\",\n  showHandlebar = true,\n  autoplay = false,\n  autoplayDuration = 5000,\n}: CompareProps) => {\n  const [sliderXPercent, setSliderXPercent] = useState(initialSliderPercentage);\n  const [isDragging, setIsDragging] = useState(false);\n\n  const sliderRef = useRef<HTMLDivElement>(null);\n\n  const [isMouseOver, setIsMouseOver] = useState(false);\n\n  const autoplayRef = useRef<NodeJS.Timeout | null>(null);\n\n  const startAutoplay = useCallback(() => {\n    if (!autoplay) return;\n\n    const startTime = Date.now();\n    const animate = () => {\n      const elapsedTime = Date.now() - startTime;\n      const progress =\n        (elapsedTime % (autoplayDuration * 2)) / autoplayDuration;\n      const percentage = progress <= 1 ? progress * 100 : (2 - progress) * 100;\n\n      setSliderXPercent(percentage);\n      autoplayRef.current = setTimeout(animate, 16); // ~60fps\n    };\n\n    animate();\n  }, [autoplay, autoplayDuration]);\n\n  const stopAutoplay = useCallback(() => {\n    if (autoplayRef.current) {\n      clearTimeout(autoplayRef.current);\n      autoplayRef.current = null;\n    }\n  }, []);\n\n  useEffect(() => {\n    startAutoplay();\n    return () => stopAutoplay();\n  }, [startAutoplay, stopAutoplay]);\n\n  function mouseEnterHandler() {\n    setIsMouseOver(true);\n    stopAutoplay();\n  }\n\n  function mouseLeaveHandler() {\n    setIsMouseOver(false);\n    if (slideMode === \"hover\") {\n      setSliderXPercent(initialSliderPercentage);\n    }\n    if (slideMode === \"drag\") {\n      setIsDragging(false);\n    }\n    startAutoplay();\n  }\n\n  const handleStart = useCallback(\n    (clientX: number) => {\n      if (slideMode === \"drag\") {\n        setIsDragging(true);\n      }\n    },\n    [slideMode],\n  );\n\n  const handleEnd = useCallback(() => {\n    if (slideMode === \"drag\") {\n      setIsDragging(false);\n    }\n  }, [slideMode]);\n\n  const handleMove = useCallback(\n    (clientX: number) => {\n      if (!sliderRef.current) return;\n      if (slideMode === \"hover\" || (slideMode === \"drag\" && isDragging)) {\n        const rect = sliderRef.current.getBoundingClientRect();\n        const x = clientX - rect.left;\n        const percent = (x / rect.width) * 100;\n        requestAnimationFrame(() => {\n          setSliderXPercent(Math.max(0, Math.min(100, percent)));\n        });\n      }\n    },\n    [slideMode, isDragging],\n  );\n\n  const handleMouseDown = useCallback(\n    (e: React.MouseEvent) => handleStart(e.clientX),\n    [handleStart],\n  );\n  const handleMouseUp = useCallback(() => handleEnd(), [handleEnd]);\n  const handleMouseMove = useCallback(\n    (e: React.MouseEvent) => handleMove(e.clientX),\n    [handleMove],\n  );\n\n  const handleTouchStart = useCallback(\n    (e: React.TouchEvent) => {\n      if (!autoplay) {\n        handleStart(e.touches[0].clientX);\n      }\n    },\n    [handleStart, autoplay],\n  );\n\n  const handleTouchEnd = useCallback(() => {\n    if (!autoplay) {\n      handleEnd();\n    }\n  }, [handleEnd, autoplay]);\n\n  const handleTouchMove = useCallback(\n    (e: React.TouchEvent) => {\n      if (!autoplay) {\n        handleMove(e.touches[0].clientX);\n      }\n    },\n    [handleMove, autoplay],\n  );\n\n  return (\n    <div\n      ref={sliderRef}\n      className={cn(\"h-[400px] w-[400px] overflow-hidden\", className)}\n      style={{\n        position: \"relative\",\n        cursor: slideMode === \"drag\" ? \"grab\" : \"col-resize\",\n      }}\n      onMouseMove={handleMouseMove}\n      onMouseLeave={mouseLeaveHandler}\n      onMouseEnter={mouseEnterHandler}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onTouchStart={handleTouchStart}\n      onTouchEnd={handleTouchEnd}\n      onTouchMove={handleTouchMove}\n    >\n      <AnimatePresence initial={false}>\n        <motion.div\n          className=\"absolute top-0 z-30 m-auto h-full w-px bg-gradient-to-b from-transparent from-[5%] via-indigo-500 to-transparent to-[95%]\"\n          style={{\n            left: `${sliderXPercent}%`,\n            top: \"0\",\n            zIndex: 40,\n          }}\n          transition={{ duration: 0 }}\n        >\n          <div className=\"absolute left-0 top-1/2 z-20 h-full w-36 -translate-y-1/2 bg-gradient-to-r from-indigo-400 via-transparent to-transparent opacity-50 [mask-image:radial-gradient(100px_at_left,white,transparent)]\" />\n          <div className=\"absolute left-0 top-1/2 z-10 h-1/2 w-10 -translate-y-1/2 bg-gradient-to-r from-cyan-400 via-transparent to-transparent opacity-100 [mask-image:radial-gradient(50px_at_left,white,transparent)]\" />\n          <div className=\"absolute -right-10 top-1/2 h-3/4 w-10 -translate-y-1/2 [mask-image:radial-gradient(100px_at_left,white,transparent)]\">\n            {/* <MemoizedSparklesCore background=\"transparent\" minSize={0.4} maxSize={1} particleDensity={1200} className=\"h-full w-full\" particleColor=\"#FFFFFF\" /> */}\n          </div>\n          {showHandlebar && (\n            <div className=\"absolute -right-2.5 top-1/2 z-30 flex h-5 w-5 -translate-y-1/2 items-center   justify-center rounded-md bg-white shadow-[0px_-1px_0px_0px_#FFFFFF40]\">\n              <EllipsisVertical className=\"h-4 w-4 text-black\" />\n            </div>\n          )}\n        </motion.div>\n      </AnimatePresence>\n      <div className=\"pointer-events-none relative z-20 h-full w-full overflow-hidden\">\n        <AnimatePresence initial={false}>\n          {firstImage ? (\n            <motion.div\n              className={cn(\n                \"absolute inset-0 z-20 h-full w-full shrink-0 select-none overflow-hidden rounded-2xl\",\n                firstImageClassName,\n              )}\n              style={{\n                clipPath: `inset(0 ${100 - sliderXPercent}% 0 0)`,\n              }}\n              transition={{ duration: 0 }}\n            >\n              <img\n                alt=\"first image\"\n                src={firstImage}\n                className={cn(\n                  \"absolute inset-0  z-20 h-full w-full shrink-0 select-none rounded-2xl\",\n                  firstImageClassName,\n                )}\n                draggable={false}\n              />\n            </motion.div>\n          ) : null}\n        </AnimatePresence>\n      </div>\n\n      <AnimatePresence initial={false}>\n        {secondImage ? (\n          <motion.img\n            className={cn(\n              \"absolute left-0 top-0 z-[19]  h-full w-full select-none rounded-2xl\",\n              secondImageClassname,\n            )}\n            alt=\"second image\"\n            src={secondImage}\n            draggable={false}\n          />\n        ) : null}\n      </AnimatePresence>\n    </div>\n  );\n};\n\n// const MemoizedSparklesCore = React.memo(SparklesCore);\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": "lib/utils.ts"
    }
  ],
  "categories": [
    "tool"
  ]
}