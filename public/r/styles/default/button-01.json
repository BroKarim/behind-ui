{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-01",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "description": "Hotkeys Dialog",
  "registryDependencies": [
    "mac-terminal",
    "figma",
    "iframe"
  ],
  "files": [
    {
      "path": "blocks/button-01/main.tsx",
      "content": "import { InfoDialog } from \"./components/hotkeys-dialog\";\n\nconst Main = () => {\n  return (\n    <>\n      <div className=\"max-w-screen bg-backgroud z-50 flex min-h-screen items-center justify-center px-4 py-8\">\n        <InfoDialog />\n      </div>\n    </>\n  );\n};\n\nexport default Main;\n",
      "type": "registry:page",
      "target": "app/main.tsx"
    },
    {
      "path": "blocks/button-01/components/hotkeys-dialog.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Info } from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Shortcut } from \"./kbd\";\nexport function InfoDialog() {\n  const customShadowStyle = {\n    boxShadow: `\n      0px 32px 64px -16px rgba(0,0,0,0.30),\n      0px 16px 32px -8px rgba(0,0,0,0.30),\n      0px 8px 16px -4px rgba(0,0,0,0.24),\n      0px 4px 8px -2px rgba(0,0,0,0.24),\n      0px -8px 16px -1px rgba(0,0,0,0.16),\n      0px 2px 4px -1px rgba(0,0,0,0.24),\n      0px 0px 0px 1px rgba(0,0,0,1.00),\n      inset 0px 0px 0px 1px rgba(255,255,255,0.08),\n      inset 0px 1px 0px 0px rgba(255,255,255,0.20)\n    `,\n  };\n\n  const commonClasses =\n    \"h-10 bg-[#131316] rounded-[99px] justify-center items-center inline-flex overflow-hidden text-white border-none\";\n  return (\n    <>\n      <Dialog>\n        <DialogTrigger asChild>\n          <Button\n            style={customShadowStyle}\n            className={`${commonClasses} text-secondary border-none `}\n          >\n            <Info />\n            Hotkets\n          </Button>\n        </DialogTrigger>\n        <DialogContent>\n          <DialogTitle>Shortcut</DialogTitle>\n          <div className=\"flex gap-8\">\n            <div className=\"flex-1 flex flex-col gap-2\">\n              <div className=\"flex flex-col gap-4\">\n                <Shortcut keys={[\"⌘\", \"Z\"]}>Undo action</Shortcut>\n                <Shortcut keys={[\"⌘\", \"⇧\", \"Z\"]}>Redo action</Shortcut>\n                <Shortcut keys={[\"⌘\", \"F\"]}>Search icons</Shortcut>\n                <Shortcut keys={[\"⌘\", \".\"]}>Toggle interface</Shortcut>\n                <Shortcut keys={[\"⌘\", \"K\"]}>Toggle export menu</Shortcut>\n                <Shortcut keys={[\"⌘\", \"⇧\", \"E\"]}>Export</Shortcut>\n              </div>\n            </div>\n            <div className=\"flex-1 flex flex-col gap-2\">\n              <div className=\"flex flex-col gap-4\">\n                <Shortcut keys={[\"⌘\", \"C\"]}>Copy image</Shortcut>\n                <Shortcut keys={[\"⌘\", \"shift\", \"C\"]}>Copy URL</Shortcut>\n                <Shortcut keys={[\"?\"]}>Open shortcuts</Shortcut>\n                <Shortcut keys={[\"⌘\", \"N\"]}>New table</Shortcut>\n                <Shortcut keys={[\"⌘\", \"⇧\", \"C\"]}>Clear contents</Shortcut>\n                <Shortcut keys={[\"⌘\", \"↩\"]}>Insert new row</Shortcut>\n              </div>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "blocks/button-01/components/kbd.tsx",
      "content": "import { cn } from \"@/lib/utils\";\n\nexport function Kbd({\n  children,\n  size = \"small\",\n}: {\n  children: React.ReactNode;\n  size?: \"small\" | \"medium\";\n}) {\n  return (\n    <kbd\n      className={cn(\n        `inline-flex items-center justify-center px-2 font-medium bg-gray-a4 tracking-[0.1px] font-sans w-auto text-gray-a10`,\n        size === \"small\" &&\n          \"h-[18px] px-1 text-[10px] rounded-[3px] min-w-[18px]\",\n        size === \"medium\" && \"h-[28px] px-2 text-xs rounded-md min-w-[28px]\",\n      )}\n    >\n      {children}\n    </kbd>\n  );\n}\n\nexport function Kbds({ children }: { children: React.ReactNode }) {\n  return <div className=\"ml-auto inline-flex gap-1 pl-4\">{children}</div>;\n}\n\nexport function Shortcut({\n  children,\n  keys,\n}: {\n  children: React.ReactNode;\n  keys: string[];\n}) {\n  return (\n    <div className=\"flex justify-between items-center\">\n      <div className=\"text-gray-11 text-[13px]\">{children}</div>\n      <div className=\"flex items-end gap-1\">\n        {keys.map((key) => (\n          <Kbd key={key} size=\"medium\">\n            {key}\n          </Kbd>\n        ))}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": ""
    },
    {
      "path": "ui/button.tsx",
      "content": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui",
      "target": "components/ui/sidebar.tsx"
    },
    {
      "path": "ui/dialog.tsx",
      "content": "\"use client\";\n\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { Cross2Icon } from \"@radix-ui/react-icons\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Dialog = DialogPrimitive.Root;\n\nconst DialogTrigger = DialogPrimitive.Trigger;\n\nconst DialogPortal = DialogPrimitive.Portal;\n\nconst DialogClose = DialogPrimitive.Close;\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className,\n    )}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className,\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <Cross2Icon className=\"size-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n));\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className,\n    )}\n    {...props}\n  />\n);\nDialogHeader.displayName = \"DialogHeader\";\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className,\n    )}\n    {...props}\n  />\n);\nDialogFooter.displayName = \"DialogFooter\";\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className,\n    )}\n    {...props}\n  />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n};\n",
      "type": "registry:ui",
      "target": "components/ui/sidebar.tsx"
    },
    {
      "path": "lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n",
      "type": "registry:lib",
      "target": "lib/utils.ts"
    }
  ],
  "categories": [
    "button"
  ]
}